[tool.poetry]
name = "cortex-shell"
version = "0.0.0"
description = "A command-line productivity tool powered by AI models, will help you accomplish your tasks faster and more efficiently."
keywords = ["bash", "chatgpt", "cli", "gpt", "openai", "productivity", "python", "shell", "terminal"]
authors = ["frostbyte-ninja"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/frostbyte-ninja/cortex-shell"
classifiers = [
  "Operating System :: OS Independent",
  "Topic :: Software Development",
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"

[tool.poetry.dependencies]
python = "^3.9"
cfgv = "^3.3"
click = "^8.1.3"
distro = "^1.9.0"
identify = "^2.5"
openai = "^1.6.1"
pathvalidate = "^3.2"
prompt-toolkit = "^3.0.43"
psutil = "^5.9.1"
pyyaml = "^6.0.1"
rich = "^13.1.0"
typer = "^0.9"
validators = "^0.22"

[tool.poetry.group.test.dependencies]
coverage = "^7.4"
pytest = "^7.1"
pytest-mock = "^3.12"
pytest-timeout = "^2.2"
re-assert = "^1.1"

[tool.poetry.group.dev.dependencies]
gitlint = "^0.19.1"
pre-commit = "^3.6"

[tool.poetry.scripts]
cortex-shell = "cortex_shell.application:run"
c-sh = "cortex_shell.application:run"

[tool.pytest.ini_options]
testpaths = ["tests"]
timeout = 60

[tool.ruff]
line-length = 120
target-version = "py39"

select = [
  "A",
  "B",
  "C4",
  "C90",
  "COM",
  "DTZ",
  "E",
  "ERA",
  "F",
  "FA",
  "FLY",
  "FURB",
  "G",
  "I",
  "INP",
  "INT",
  "LOG",
  "N",
  "PERF",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "SIM",
  "SLF",
  "SLOT",
  "T10",
  "TCH",
  "TD",
  "TID",
  "TRY",
  "UP",
  "W",
  "YTT",
]

ignore = [
  "E501",    # line too long
  "PLC0414", # useless-import-alias
  "RET505",  # superfluous-else-return
  "RET508",  # superfluous-else-break
  "RUF012",  # mutable-class-default
  "SIM112",  # uncapitalized-environment-variables
  "TD003",   # missing-todo-link
  "TID252",  # relative-imports
  "TRY003",  # raise-vanilla-args

  # disabled because of formatting
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D206",   # indent-with-spaces
  "D300",   # triple-single-quotes
  "E111",   # indentation-with-invalid-multiple
  "E114",   # indentation-with-invalid-multiple-comment
  "E117",   # over-indented
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q000",   # bad-quotes-inline-string
  "Q001",   # bad-quotes-multiline-string
  "Q002",   # bad-quotes-docstring
  "Q003",   # avoidable-escaped-quote
  "W191",   # tab-indentation
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
  "PLC2701", # import-private-name
  "PLR0904", # too-many-public-methods
  "PLR0913", # too-many-arguments
  "PLR0917", # too-many-positional
  "PLR2004", # magic-value-comparison
  "PLR6301", # no-self-use
  "SLF001",  # private-member-access
]

[tool.ruff.lint.pylint]
max-args = 7

[lint.isort]
combine-as-imports = true

[tool.mypy]
strict = true
incremental = false
disallow_subclassing_any = false

[[tool.mypy.overrides]]
module = ["yaml"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*", "testing.*"]
disable_error_code = ["attr-defined", "no-any-return", "no-untyped-call", "no-untyped-def"]

[tool.coverage.run]
omit = ["__main__.py", "__init__.py"]

[build-system]
requires = ["poetry_core>=1.2.0", "poetry-dynamic-versioning>=1.2.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"
